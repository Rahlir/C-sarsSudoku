Integration Testing of sudoku module

These tests should fail:
Too few arguments...
Error: provide one arg indicating mode
Usage: ./sudoku mode
Too many arguments...
Error: provide one arg indicating mode
Usage: ./sudoku mode
Invalid arg...
Error: mode must be either 'create' or 'solve'
Solving grid with too few ints:
3 2 1 6 8 0 0 0 0
6 4 7 2 1 0 5 8 0
0 0 0 0 3 0 1 0 6
5 0 0 0 7 0 0 0 0
4 9 0 0 0 1 7 6 0
0 0 0 9 0 0 0 5 0
0 7 4 0 0 8 0 3 1
1 0 0 3 4 0 0 7 8
8 3 0 1 9 0 0
Error: invalid grid
Solving grid with non-int chars:
1	0	0	2	5	0	6	!	8
5	0	0	0	0	0	4	0	0
0	0	4	0	0	7	9	0	1
9	0	0	0	4	5	0	1	0
0	e	0	7	2	6	3	0	0
0	0	0	8	9	0	0	0	0
6	0	8	0	0	0	0	0	0
0	0	3	1	0	2	0	8	j
2	0	1	0	0	0	0	4	0
2   4   7 
Error: invalid grid
Solving grid with out-of-range ints:
0 2 0 0 8 1 0 0 -3
0 5 0 0 0 0 11 2 0
0 7 0 5 0 0 0 9 0
0 0 0 0 0 0 0 0 0
0 0 6 3 0 0 4 0 0
20 0 0 0 0 4 0 0 8
0 0 0 0 4 0 0 0 0
2 4 0 0 9 5 0 0 0
0 0 0 8 0 3 0 5 0
Error: invalid grid
Solving grid with no solution:
3 2 1 6 8 0 0 0 0
6 4 7 2 1 0 5 8 0
0 0 0 0 3 0 1 0 6
5 0 0 0 7 0 0 0 0
4 9 0 0 0 1 7 6 0
2 0 0 9 0 0 0 5 0
0 7 4 0 0 8 0 3 1
1 0 0 3 4 0 0 7 8
8 3 0 1 9 0 0 0 0
Couldn't find any solutions
Solving pre-filled grid with no solution:
1 7 9 2 5 4 6 3 8 
5 1 6 9 1 3 4 7 2 
3 2 4 6 8 7 9 5 1 
9 6 2 3 4 5 8 1 7 
8 1 5 7 2 6 3 9 4 
4 3 7 8 9 1 2 6 5 
6 5 8 4 7 9 1 2 3 
6 4 3 1 6 2 5 8 9 
2 9 1 5 3 8 7 4 9 
Error: invalid grid

These tests should succeed:
Solving valid pre-filled grid:
1 7 9 2 5 4 6 3 8 
5 8 6 9 1 3 4 7 2 
3 2 4 6 8 7 9 5 1 
9 6 2 3 4 5 8 1 7 
8 1 5 7 2 6 3 9 4 
4 3 7 8 9 1 2 6 5 
6 5 8 4 7 9 1 2 3 
7 4 3 1 6 2 5 8 9 
2 9 1 5 3 8 7 4 6 
Found unique solution:
1 7 9 2 5 4 6 3 8 
5 8 6 9 1 3 4 7 2 
3 2 4 6 8 7 9 5 1 
9 6 2 3 4 5 8 1 7 
8 1 5 7 2 6 3 9 4 
4 3 7 8 9 1 2 6 5 
6 5 8 4 7 9 1 2 3 
7 4 3 1 6 2 5 8 9 
2 9 1 5 3 8 7 4 6 
Solving grid with more than one solution:
1	0	0	2	5	0	6	0	8
5	0	0	0	0	0	4	0	0
0	0	4	0	0	7	0	0	1
9	0	0	0	4	5	0	1	0
0	0	0	0	2	6	3	0	0
0	0	0	8	9	0	0	0	0
6	0	8	0	0	0	0	0	0
0	0	3	1	0	2	0	8	0
2	0	1	0	0	0	0	4	0
Found multiple solutions, printing one:
1 7 9 2 5 4 6 3 8 
5 8 2 6 1 3 4 7 9 
3 6 4 9 8 7 2 5 1 
9 2 6 3 4 5 8 1 7 
8 1 5 7 2 6 3 9 4 
4 3 7 8 9 1 5 6 2 
6 5 8 4 7 9 1 2 3 
7 4 3 1 6 2 9 8 5 
2 9 1 5 3 8 7 4 6 
Solving grid with unique solution:
0 2 0 0 8 1 0 0 0
0 5 0 0 0 0 7 2 0
0 7 0 5 0 0 0 9 0
0 0 0 0 0 0 0 0 0
0 0 6 3 0 0 4 0 0
9 0 0 0 0 4 0 0 8
0 0 0 0 4 0 0 0 0
2 4 0 0 9 5 0 0 0
0 0 0 8 0 3 0 5 0
Found unique solution:
6 2 9 7 8 1 3 4 5 
1 5 8 4 3 9 7 2 6 
3 7 4 5 2 6 8 9 1 
4 3 7 9 5 8 1 6 2 
5 8 6 3 1 2 4 7 9 
9 1 2 6 7 4 5 3 8 
8 6 5 2 4 7 9 1 3 
2 4 3 1 9 5 6 8 7 
7 9 1 8 6 3 2 5 4 
Fuzz testing with 10 randomly generated valid grids:
Unsolved grid:
1 3 0 0 2 6 4 7 8 
4 0 0 1 7 0 5 9 3 
7 8 9 0 4 0 6 0 2 
0 0 0 0 0 0 0 0 0 
6 0 0 0 0 7 9 0 1 
9 2 8 5 6 0 0 0 0 
2 9 4 7 0 0 8 6 5 
0 0 0 0 9 2 1 3 4 
0 0 0 8 0 0 0 0 0 
Solution:
Found unique solution:
1 3 5 9 2 6 4 7 8 
4 6 2 1 7 8 5 9 3 
7 8 9 3 4 5 6 1 2 
5 7 1 4 3 9 2 8 6 
6 4 3 2 8 7 9 5 1 
9 2 8 5 6 1 3 4 7 
2 9 4 7 1 3 8 6 5 
8 5 7 6 9 2 1 3 4 
3 1 6 8 5 4 7 2 9 

Unsolved grid:
5 0 6 1 0 7 4 8 9 
0 8 0 0 0 9 0 1 2 
9 1 2 0 0 0 7 3 0 
1 7 0 9 6 0 0 0 0 
6 0 8 5 0 1 0 4 0 
4 0 5 0 0 2 0 0 0 
2 0 0 4 0 3 0 7 0 
8 0 7 0 0 0 0 0 1 
3 0 1 0 0 8 5 9 4 
Solution:
Found unique solution:
5 3 6 1 2 7 4 8 9 
7 8 4 3 5 9 6 1 2 
9 1 2 8 4 6 7 3 5 
1 7 3 9 6 4 2 5 8 
6 2 8 5 3 1 9 4 7 
4 9 5 7 8 2 1 6 3 
2 5 9 4 1 3 8 7 6 
8 4 7 6 9 5 3 2 1 
3 6 1 2 7 8 5 9 4 

Unsolved grid:
7 5 0 0 0 0 3 4 0 
0 0 0 6 0 0 8 1 5 
0 6 0 0 0 5 9 0 0 
0 7 0 0 0 8 2 0 9 
0 0 0 7 2 9 0 6 4 
9 0 4 0 0 0 0 0 0 
6 3 0 8 4 7 1 9 0 
2 8 7 0 6 0 0 5 3 
1 4 9 2 0 0 6 7 0 
Solution:
Found unique solution:
7 5 8 1 9 2 3 4 6 
3 9 2 6 7 4 8 1 5 
4 6 1 3 8 5 9 2 7 
5 7 6 4 1 8 2 3 9 
8 1 3 7 2 9 5 6 4 
9 2 4 5 3 6 7 8 1 
6 3 5 8 4 7 1 9 2 
2 8 7 9 6 1 4 5 3 
1 4 9 2 5 3 6 7 8 

Unsolved grid:
7 9 0 0 0 0 2 8 0 
3 0 0 0 9 0 0 5 4 
1 0 4 5 0 8 0 0 9 
0 0 1 0 0 6 7 2 0 
2 0 0 0 4 1 0 0 5 
9 0 0 0 0 7 0 4 0 
8 0 9 6 2 4 5 0 0 
0 0 0 3 0 0 6 1 8 
0 0 7 1 8 5 4 9 2 
Solution:
Found unique solution:
7 9 5 4 1 3 2 8 6 
3 6 8 7 9 2 1 5 4 
1 2 4 5 6 8 3 7 9 
4 8 1 9 5 6 7 2 3 
2 7 3 8 4 1 9 6 5 
9 5 6 2 3 7 8 4 1 
8 1 9 6 2 4 5 3 7 
5 4 2 3 7 9 6 1 8 
6 3 7 1 8 5 4 9 2 

Unsolved grid:
0 0 0 1 9 0 7 4 8 
0 8 4 3 5 6 0 1 2 
0 1 2 7 0 8 0 0 6 
0 0 0 2 1 0 4 9 5 
0 4 9 0 6 0 0 2 3 
2 3 0 0 0 4 0 0 1 
0 0 0 0 7 5 0 6 0 
4 0 0 0 0 1 0 0 0 
0 5 6 0 2 9 0 0 7 
Solution:
Found unique solution:
5 6 3 1 9 2 7 4 8 
7 8 4 3 5 6 9 1 2 
9 1 2 7 4 8 3 5 6 
6 7 8 2 1 3 4 9 5 
1 4 9 5 6 7 8 2 3 
2 3 5 9 8 4 6 7 1 
3 9 1 8 7 5 2 6 4 
4 2 7 6 3 1 5 8 9 
8 5 6 4 2 9 1 3 7 

Unsolved grid:
0 1 6 7 8 9 0 3 4 
9 4 0 5 2 0 0 7 1 
0 7 2 0 0 0 8 5 9 
0 0 5 0 3 0 0 0 0 
7 0 3 8 9 0 0 0 0 
0 8 4 1 5 0 0 2 0 
0 0 0 0 4 0 3 0 0 
2 0 7 9 0 8 5 4 0 
0 0 9 3 0 0 0 8 2 
Solution:
Found unique solution:
5 1 6 7 8 9 2 3 4 
9 4 8 5 2 3 6 7 1 
3 7 2 4 6 1 8 5 9 
1 9 5 2 3 4 7 6 8 
7 2 3 8 9 6 4 1 5 
6 8 4 1 5 7 9 2 3 
8 5 1 6 4 2 3 9 7 
2 3 7 9 1 8 5 4 6 
4 6 9 3 7 5 1 8 2 

Unsolved grid:
3 0 2 5 0 7 0 9 1 
9 8 0 1 3 0 0 0 0 
6 0 0 4 0 0 0 3 5 
0 0 8 2 9 0 5 0 3 
5 0 0 6 7 0 0 0 0 
0 0 1 8 4 0 9 0 6 
8 5 3 0 0 6 4 0 0 
1 0 0 9 0 8 3 6 0 
0 0 6 3 1 4 0 0 0 
Solution:
Found unique solution:
3 4 2 5 6 7 8 9 1 
9 8 5 1 3 2 6 4 7 
6 1 7 4 8 9 2 3 5 
4 6 8 2 9 1 5 7 3 
5 2 9 6 7 3 1 8 4 
7 3 1 8 4 5 9 2 6 
8 5 3 7 2 6 4 1 9 
1 7 4 9 5 8 3 6 2 
2 9 6 3 1 4 7 5 8 

Unsolved grid:
0 0 0 0 0 0 4 7 9 
0 0 7 0 0 5 2 8 1 
8 9 0 2 4 7 0 0 0 
6 8 0 3 0 0 5 1 0 
0 0 0 6 0 1 8 4 3 
0 1 0 5 0 2 0 0 7 
7 0 6 0 0 0 9 0 4 
0 4 0 0 6 0 1 0 8 
1 2 0 4 0 0 7 3 6 
Solution:
Found unique solution:
2 5 3 8 1 6 4 7 9 
4 6 7 9 3 5 2 8 1 
8 9 1 2 4 7 3 6 5 
6 8 9 3 7 4 5 1 2 
5 7 2 6 9 1 8 4 3 
3 1 4 5 8 2 6 9 7 
7 3 6 1 2 8 9 5 4 
9 4 5 7 6 3 1 2 8 
1 2 8 4 5 9 7 3 6 

Unsolved grid:
4 0 2 0 5 1 8 0 0 
0 6 0 0 7 0 2 3 0 
0 7 0 0 0 0 0 0 0 
0 4 5 0 6 0 9 1 0 
6 0 0 1 9 4 5 2 7 
9 1 7 0 0 0 0 0 4 
1 0 4 0 8 3 7 6 2 
0 0 0 0 0 6 0 5 1 
0 5 0 2 1 7 0 9 0 
Solution:
Found unique solution:
4 3 2 6 5 1 8 7 9 
8 6 1 4 7 9 2 3 5 
5 7 9 8 3 2 1 4 6 
2 4 5 7 6 8 9 1 3 
6 8 3 1 9 4 5 2 7 
9 1 7 3 2 5 6 8 4 
1 9 4 5 8 3 7 6 2 
7 2 8 9 4 6 3 5 1 
3 5 6 2 1 7 4 9 8 

Unsolved grid:
4 5 3 6 7 2 8 9 0 
0 7 0 9 3 0 2 4 0 
0 1 0 8 0 0 0 7 3 
0 0 7 2 5 3 9 0 0 
0 0 0 0 8 9 0 0 0 
0 9 0 0 6 0 0 8 2 
7 0 9 5 0 6 0 3 8 
0 4 0 3 2 0 0 0 9 
8 0 0 7 0 0 0 0 6 
Solution:
Found unique solution:
4 5 3 6 7 2 8 9 1 
6 7 8 9 3 1 2 4 5 
9 1 2 8 4 5 6 7 3 
1 8 7 2 5 3 9 6 4 
2 6 4 1 8 9 3 5 7 
3 9 5 4 6 7 1 8 2 
7 2 9 5 1 6 4 3 8 
5 4 6 3 2 8 7 1 9 
8 3 1 7 9 4 5 2 6 

UNIT TESTING

************** process_input and print_grid **************
Test on empty grid (all 0s): first command should return true
and print_grid should print an empty grid correctly
true
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 

Clear the grid after each call

Test on valid grid: first command should return true 
and print_grid should print correctly
true
8 0 0 0 0 3 0 5 6 
5 1 6 0 0 0 0 0 0 
2 3 4 0 0 0 8 0 1 
0 9 7 0 0 0 0 1 0 
0 0 2 7 3 9 0 4 0 
3 0 8 0 0 4 7 0 9 
0 2 0 8 0 6 0 7 5 
6 0 5 0 0 1 0 0 2 
7 8 1 0 5 2 3 6 0 

Test on an inconsistent grid with: should return false
false

Test on grid with out of range values: should return false
false

Test on valid grid but numbers are unevenly spaced across the file: 
should return true and print grid normally
true
0 2 1 6 8 5 4 0 7 
6 4 7 2 1 9 5 8 3 
9 8 5 7 3 4 1 2 6 
5 6 2 4 7 3 8 1 9 
4 9 3 8 5 0 7 6 2 
7 1 8 9 2 6 3 5 4 
2 7 4 5 6 8 9 3 1 
1 5 0 3 4 2 6 7 8 
8 3 6 1 9 7 2 4 5 

Test on invalid grid with non-integers: 
should return false
false

************** check_consistency **************
Test on row with repeat ints: 
should return false
false
Test on row with no repeat ints: 
should return true
true

Test on col with repeat ints: 
should return false
false
Test on col with no repeat ints: 
should return true
true

Test on square with repeat ints: 
should return false
false
Test on square with no repeat ints: 
should return true
true


************** check_valid **************
Test on grid with out of range values, should return false:
0 0 0 0 0 0 0 -3 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 100 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 -2 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
false
Test on grid with in range values, should return true:
0 0 0 0 0 0 0 3 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 7 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
true

************** grid_copy **************
Grid1:
1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 9 
Grid2:
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 
Copying Grid1 to Grid2...
Updated grid2:
1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 9 
